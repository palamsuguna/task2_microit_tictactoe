<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Tic-Tac-Toe</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      background: linear-gradient(to right, #f2fcfe, #1c92d2);
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      height: 100vh;
      margin: 0;
    }

    h1 {
      color: #333;
    }

    .board {
      display: grid;
      grid-template-columns: repeat(3, 100px);
      grid-template-rows: repeat(3, 100px);
      gap: 5px;
    }

    .cell {
      background-color: #fff;
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 2.5rem;
      font-weight: bold;
      cursor: pointer;
      border-radius: 10px;
      box-shadow: 0 4px 6px rgba(0,0,0,0.1);
    }

    .cell:hover {
      background-color: #f0f0f0;
    }

    #status {
      margin-top: 20px;
      font-size: 1.2rem;
      color: #222;
    }

    button {
      margin-top: 15px;
      padding: 10px 20px;
      background: #007bff;
      color: white;
      border: none;
      border-radius: 8px;
      cursor: pointer;
    }

    button:hover {
      background: #0056b3;
    }
  </style>
</head>
<body>

  <h1>Tic-Tac-Toe</h1>
  <div class="board" id="board">
    <!-- 9 cells will be generated by JS -->
  </div>
  <div id="status">Player X's turn</div>
  <button onclick="resetGame()">Restart Game</button>

  <script>
    const board = document.getElementById('board');
    const statusText = document.getElementById('status');
    let currentPlayer = 'X';
    let gameActive = true;
    const cells = [];

    function createBoard() {
      for (let i = 0; i < 9; i++) {
        const cell = document.createElement('div');
        cell.classList.add('cell');
        cell.dataset.index = i;
        cell.addEventListener('click', handleClick);
        board.appendChild(cell);
        cells.push(cell);
      }
    }

    function handleClick(e) {
      const cell = e.target;
      const index = cell.dataset.index;

      if (!gameActive || cell.textContent !== '') return;

      cell.textContent = currentPlayer;

      if (checkWinner()) {
        statusText.textContent = `Player ${currentPlayer} wins!`;
        gameActive = false;
        return;
      }

      if (cells.every(cell => cell.textContent !== '')) {
        statusText.textContent = "It's a draw!";
        gameActive = false;
        return;
      }

      currentPlayer = currentPlayer === 'X' ? 'O' : 'X';
      statusText.textContent = `Player ${currentPlayer}'s turn`;
    }

    function checkWinner() {
      const winCombos = [
        [0,1,2],[3,4,5],[6,7,8], // rows
        [0,3,6],[1,4,7],[2,5,8], // columns
        [0,4,8],[2,4,6]          // diagonals
      ];

      return winCombos.some(combo => {
        const [a, b, c] = combo;
        return cells[a].textContent === currentPlayer &&
               cells[b].textContent === currentPlayer &&
               cells[c].textContent === currentPlayer;
      });
    }

    function resetGame() {
      cells.forEach(cell => cell.textContent = '');
      currentPlayer = 'X';
      gameActive = true;
      statusText.textContent = `Player ${currentPlayer}'s turn`;
    }

    createBoard();
  </script>

</body>
</html>
